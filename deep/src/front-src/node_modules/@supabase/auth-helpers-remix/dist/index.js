"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  createBrowserClient: () => createBrowserClient,
  createServerClient: () => createServerClient
});
module.exports = __toCommonJS(src_exports);

// src/createSupabaseClient.ts
var import_auth_helpers_shared = require("@supabase/auth-helpers-shared");
function createBrowserClient(supabaseUrl, supabaseKey, {
  options,
  cookieOptions
} = {}) {
  var _a;
  if (!supabaseUrl || !supabaseKey) {
    throw new Error(
      "supabaseUrl and supabaseKey are required to create a Supabase client! Find these under `Settings` > `API` in your Supabase dashboard."
    );
  }
  const storageKey = cookieOptions == null ? void 0 : cookieOptions.name;
  cookieOptions == null ? true : delete cookieOptions.name;
  return (0, import_auth_helpers_shared.createSupabaseClient)(supabaseUrl, supabaseKey, {
    ...options,
    global: {
      ...options == null ? void 0 : options.global,
      headers: {
        ...(_a = options == null ? void 0 : options.global) == null ? void 0 : _a.headers,
        "X-Client-Info": `${"@supabase/auth-helpers-remix"}@${"0.3.0"}`
      }
    },
    auth: {
      storageKey,
      storage: new import_auth_helpers_shared.BrowserCookieAuthStorageAdapter(cookieOptions)
    }
  });
}
var RemixServerAuthStorageAdapter = class extends import_auth_helpers_shared.CookieAuthStorageAdapter {
  constructor(request, response, cookieOptions) {
    super(cookieOptions);
    this.request = request;
    this.response = response;
    this.isServer = true;
  }
  getCookie(name) {
    var _a, _b;
    return (0, import_auth_helpers_shared.parseCookies)(((_b = (_a = this.request) == null ? void 0 : _a.headers) == null ? void 0 : _b.get("Cookie")) ?? "")[name];
  }
  setCookie(name, value) {
    const cookieStr = (0, import_auth_helpers_shared.serializeCookie)(name, value, {
      ...this.cookieOptions,
      // Allow supabase-js on the client to read the cookie as well
      httpOnly: false
    });
    this.response.headers.append("set-cookie", cookieStr);
  }
  deleteCookie(name) {
    const cookieStr = (0, import_auth_helpers_shared.serializeCookie)(name, "", {
      ...this.cookieOptions,
      maxAge: 0,
      // Allow supabase-js on the client to read the cookie as well
      httpOnly: false
    });
    this.response.headers.append("set-cookie", cookieStr);
  }
};
function createServerClient(supabaseUrl, supabaseKey, {
  request,
  response,
  options,
  cookieOptions
}) {
  var _a;
  if (!supabaseUrl || !supabaseKey) {
    throw new Error(
      "supabaseUrl and supabaseKey are required to create a Supabase client! Find these under `Settings` > `API` in your Supabase dashboard."
    );
  }
  if (!request || !response) {
    throw new Error(
      "request and response must be passed to createSupabaseClient function, when called from loader or action"
    );
  }
  return (0, import_auth_helpers_shared.createSupabaseClient)(supabaseUrl, supabaseKey, {
    ...options,
    global: {
      ...options == null ? void 0 : options.global,
      headers: {
        ...(_a = options == null ? void 0 : options.global) == null ? void 0 : _a.headers,
        "X-Client-Info": `${"@supabase/auth-helpers-remix"}@${"0.3.0"}`
      }
    },
    auth: {
      storage: new RemixServerAuthStorageAdapter(request, response, cookieOptions)
    }
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createBrowserClient,
  createServerClient
});
//# sourceMappingURL=index.js.map