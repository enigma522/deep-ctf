{
  "version": 3,
  "sources": ["../../../app/routes/signin.tsx", "../../../app/components/account/SignInForm.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/signin.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/signin.tsx\");\n  import.meta.hot.lastModified = \"1728767387048.1558\";\n}\n// REMIX HMR END\n\nimport React from \"react\";\nimport { useOutletContext } from \"@remix-run/react\";\nimport { getSupabaseWithSessionAndHeaders } from \"../lib/supabase-server.ts\";\nimport { redirect } from \"@remix-run/deno\";\nimport { json } from \"@remix-run/deno\";\nimport { SignInForm } from \"../components/account/SignInForm.tsx\";\nexport let loader = async ({\n  request\n}) => {\n  const {\n    headers,\n    serverSession\n  } = await getSupabaseWithSessionAndHeaders({\n    request\n  });\n  if (serverSession) {\n    return redirect(\"/projects\", {\n      headers\n    });\n  }\n  return json({\n    success: true\n  }, {\n    headers\n  });\n};\nconst SignIn = () => {\n  _s();\n  const {\n    supabase,\n    domainUrl\n  } = useOutletContext();\n  const {\n    setOpenSign,\n    setMessage\n  } = useOutletContext();\n  return <div className=\" min-h-screen flex items-center justify-center\">\n      <SignInForm supabase={supabase} setSignIn={setOpenSign} setMessagesign={setMessage} />\n    </div>;\n};\n_s(SignIn, \"Mhe5X4FrNMUuSvN5/D10N/acXW0=\", false, function () {\n  return [useOutletContext, useOutletContext];\n});\n_c = SignIn;\nexport default SignIn;\nvar _c;\n$RefreshReg$(_c, \"SignIn\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/account/SignInForm.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/account/SignInForm.tsx\");\n  import.meta.hot.lastModified = \"1728767387048.1558\";\n}\n// REMIX HMR END\n\nimport React, { useState } from \"react\";\nimport logo from \"../../assets/CALC.svg\";\nexport const SignInForm = ({\n  supabase,\n  setMessagesign,\n  setSignIn\n}) => {\n  _s();\n  const initialFormState = {\n    email: \"\",\n    password: \"\"\n  };\n  const [formData, setFormData] = useState(initialFormState);\n  const [showError, setShowError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showMessage, setShowMessage] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [counter, setCounter] = useState(0);\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent the default form submission\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email: formData.email,\n      password: formData.password\n    });\n    try {\n      if (error) {\n        setCounter(counter + 1);\n\n        // Stops users from trying more than 5 times.\n        // NOTE: Users can currently just refresh the page to reset the counter.\n        if (counter === 5) {\n          setErrorMessage(\"You have tried to login too many times. Please try again later.\");\n          setShowError(true);\n          const url = `${window.location.origin}/reset`;\n          const {\n            error\n          } = await supabase.auth.resetPasswordForEmail(formData.email, {\n            redirectTo: url\n          });\n          if (error) {\n            setErrorMessage(error.message);\n            setShowError(true);\n            setTimeout(() => {\n              setShowError(false);\n            }, 5000);\n          }\n\n          // If we hit the counter limit, we send a password reset email after 4 seconds\n          setTimeout(() => {\n            setShowError(false);\n            setMessage(\"We have sent you an email to reset your password. Please check your email including any spam or junk folders.\");\n            setShowMessage(true);\n            setCounter(0);\n          }, 4000);\n\n          // We currently hide the message 10 seconds later\n          setTimeout(() => {\n            setShowMessage(false);\n          }, 10000);\n        } else {\n          setErrorMessage(error.message);\n          setShowError(true);\n          setTimeout(() => {\n            setShowError(false);\n          }, 5000);\n        }\n      } else {\n        setMessage(\"You have been signed in\");\n        setMessagesign(\"You have been signed in\");\n        setSignIn(true);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Handle input changes\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Update the corresponding property in the form data\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  return <div className=\"max-w-sm rounded-lg shadow-lg bg-white p-6 space-y-6  dark:border-gray-700 \">\n      <div className=\"space-y-2 text-center justify-center items-center \">\n        <h1 className=\"text-3xl font-bold\">Sign In</h1>\n\n        <p className=\"text-zinc-500 dark:text-zinc-400\">\n          Enter your email to sign in to IBM-SL\n        </p>\n      </div>\n      <div className=\"items-center justify-center\">\n        <img src={logo} alt=\"IBM Logo\" className=\"block mx-auto w-24 object-cover\" />\n      </div>\n      <form>\n        <div>\n          <label htmlFor=\"email\" className=\"block text-black font-medium mb-2\">\n            Email\n          </label>\n          <input type=\"text\" id=\"email\" name=\"email\" value={formData.email || \"\"} className=\"w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100\" onChange={handleInputChange} />\n        </div>\n\n        <div className=\"mb-4\">\n          <label htmlFor=\"password\" className=\"block text-black font-medium mb-2\">\n            Password\n          </label>\n          <input type=\"password\" id=\"password\" name=\"password\" value={formData.password || \"\"} className=\"w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100\" onChange={handleInputChange} />\n        </div>\n        <button className=\"w-full border-2 border-black hover:bg-black text-black hover:text-white p-2 rounded transition duration-300\" onClick={handleSubmit}>\n          Sign In\n        </button>\n        <div>\n          <a href=\"/forgot\" className=\"text-blue-500 hover:underline\">\n            Forgot Password ?\n          </a>\n        </div>\n      </form>\n\n      {showError && <div className=\"bg-red-200 p-3 mb-3 rounded-md text-red-800 mt-6\">\n          {errorMessage}\n        </div>}\n    </div>;\n};\n_s(SignInForm, \"cz1u8i5e0ud3X1g5gW//sA+ElDw=\");\n_c = SignInForm;\nvar _c;\n$RefreshReg$(_c, \"SignInForm\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,kBAAyB;AACzB,IAAAA,eAAqB;;;ACJrB,mBAAgC;AAgGxB;AApHR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,4CAA8C,EAAE;AAAA,EACzF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAuC;AACvC,cAAY,IAAI,eAAe;AACjC;AAKO,IAAM,aAAa,CAAC;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,KAAG;AACH,QAAM,mBAAmB;AAAA,IACvB,OAAO;AAAA,IACP,UAAU;AAAA,EACZ;AACA,QAAM,CAAC,UAAU,WAAW,QAAI,uBAAS,gBAAgB;AACzD,QAAM,CAAC,WAAW,YAAY,QAAI,uBAAS,KAAK;AAChD,QAAM,CAAC,cAAc,eAAe,QAAI,uBAAS,EAAE;AACnD,QAAM,CAAC,aAAa,cAAc,QAAI,uBAAS,KAAK;AACpD,QAAM,CAAC,SAAS,UAAU,QAAI,uBAAS,EAAE;AACzC,QAAM,CAAC,SAAS,UAAU,QAAI,uBAAS,CAAC;AAGxC,QAAM,eAAe,OAAM,MAAK;AAC9B,MAAE,eAAe;AACjB,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAAI,MAAM,SAAS,KAAK,mBAAmB;AAAA,MACzC,OAAO,SAAS;AAAA,MAChB,UAAU,SAAS;AAAA,IACrB,CAAC;AACD,QAAI;AACF,UAAI,OAAO;AACT,mBAAW,UAAU,CAAC;AAItB,YAAI,YAAY,GAAG;AACjB,0BAAgB,iEAAiE;AACjF,uBAAa,IAAI;AACjB,gBAAM,MAAM,GAAG,OAAO,SAAS;AAC/B,gBAAM;AAAA,YACJ,OAAAC;AAAA,UACF,IAAI,MAAM,SAAS,KAAK,sBAAsB,SAAS,OAAO;AAAA,YAC5D,YAAY;AAAA,UACd,CAAC;AACD,cAAIA,QAAO;AACT,4BAAgBA,OAAM,OAAO;AAC7B,yBAAa,IAAI;AACjB,uBAAW,MAAM;AACf,2BAAa,KAAK;AAAA,YACpB,GAAG,GAAI;AAAA,UACT;AAGA,qBAAW,MAAM;AACf,yBAAa,KAAK;AAClB,uBAAW,+GAA+G;AAC1H,2BAAe,IAAI;AACnB,uBAAW,CAAC;AAAA,UACd,GAAG,GAAI;AAGP,qBAAW,MAAM;AACf,2BAAe,KAAK;AAAA,UACtB,GAAG,GAAK;AAAA,QACV,OAAO;AACL,0BAAgB,MAAM,OAAO;AAC7B,uBAAa,IAAI;AACjB,qBAAW,MAAM;AACf,yBAAa,KAAK;AAAA,UACpB,GAAG,GAAI;AAAA,QACT;AAAA,MACF,OAAO;AACL,mBAAW,yBAAyB;AACpC,uBAAe,yBAAyB;AACxC,kBAAU,IAAI;AAAA,MAChB;AAAA,IACF,SAASA,QAAP;AACA,cAAQ,MAAMA,MAAK;AAAA,IACrB;AAAA,EACF;AAGA,QAAM,oBAAoB,OAAK;AAC7B,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAAI,EAAE;AAGN,gBAAY;AAAA,MACV,GAAG;AAAA,MACH,CAAC,IAAI,GAAG;AAAA,IACV,CAAC;AAAA,EACH;AACA,SAAO,mDAAC,SAAI,WAAU,+EAClB;AAAA,uDAAC,SAAI,WAAU,sDACb;AAAA,yDAAC,QAAG,WAAU,sBAAqB,uBAAnC;AAAA;AAAA;AAAA;AAAA,aAA0C;AAAA,MAE1C,mDAAC,OAAE,WAAU,oCAAmC,qDAAhD;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SALF;AAAA;AAAA;AAAA;AAAA,WAMA;AAAA,IACA,mDAAC,SAAI,WAAU,+BACb,6DAAC,SAAI,KAAK,cAAM,KAAI,YAAW,WAAU,qCAAzC;AAAA;AAAA;AAAA;AAAA,WAA2E,KAD7E;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,mDAAC,UACC;AAAA,yDAAC,SACC;AAAA,2DAAC,WAAM,SAAQ,SAAQ,WAAU,qCAAoC,qBAArE;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,mDAAC,WAAM,MAAK,QAAO,IAAG,SAAQ,MAAK,SAAQ,OAAO,SAAS,SAAS,IAAI,WAAU,gJAA+I,UAAU,qBAA3O;AAAA;AAAA;AAAA;AAAA,eAA8P;AAAA,WAJhQ;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,MAEA,mDAAC,SAAI,WAAU,QACb;AAAA,2DAAC,WAAM,SAAQ,YAAW,WAAU,qCAAoC,wBAAxE;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,mDAAC,WAAM,MAAK,YAAW,IAAG,YAAW,MAAK,YAAW,OAAO,SAAS,YAAY,IAAI,WAAU,gJAA+I,UAAU,qBAAxP;AAAA;AAAA;AAAA;AAAA,eAA2Q;AAAA,WAJ7Q;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,MACA,mDAAC,YAAO,WAAU,+GAA8G,SAAS,cAAc,uBAAvJ;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,SACC,6DAAC,OAAE,MAAK,WAAU,WAAU,iCAAgC,iCAA5D;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,SArBF;AAAA;AAAA;AAAA;AAAA,WAsBA;AAAA,IAEC,aAAa,mDAAC,SAAI,WAAU,oDACxB,0BADS;AAAA;AAAA;AAAA;AAAA,WAEZ;AAAA,OArCC;AAAA;AAAA;AAAA;AAAA,SAsCL;AACJ;AACA,GAAG,YAAY,8BAA8B;AAC7C,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,YAAY;AAE7B,OAAO,eAAe;AACtB,OAAO,eAAe;;;ADvGhB,IAAAC,0BAAA;AAzDN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,4BAA8B,EAAE;AAAA,EACzE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAIC,MAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAuB;AACvB,cAAY,IAAI,eAAe;AACjC;AA6BA,IAAM,SAAS,MAAM;AACnB,EAAAC,IAAG;AACH,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,IAAI,iBAAiB;AACrB,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,IAAI,iBAAiB;AACrB,SAAO,oDAAC,SAAI,WAAU,kDAClB,8DAAC,cAAW,UAAoB,WAAW,aAAa,gBAAgB,cAAxE;AAAA;AAAA;AAAA;AAAA,SAAoF,KADjF;AAAA;AAAA;AAAA;AAAA,SAEL;AACJ;AACAA,IAAG,QAAQ,gCAAgC,OAAO,WAAY;AAC5D,SAAO,CAAC,kBAAkB,gBAAgB;AAC5C,CAAC;AACDC,MAAK;AACL,IAAO,iBAAQ;AACf,IAAIA;AACJ,aAAaA,KAAI,QAAQ;AAEzB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_deno", "error", "import_jsx_dev_runtime", "_s", "_s", "_c"]
}
